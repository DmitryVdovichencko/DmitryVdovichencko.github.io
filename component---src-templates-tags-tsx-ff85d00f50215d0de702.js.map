{"version":3,"file":"component---src-templates-tags-tsx-ff85d00f50215d0de702.js","mappings":"8HAgBA,IATiBA,IAAkD,IAAjD,KAAEC,GAAqBD,EACvC,OACEE,EAAAA,cAAA,OAAKC,UAAU,yBAEbD,EAAAA,cAAA,QAAMC,UAAU,wBAAwBF,GACpC,C,iFCgCV,UApCaD,IAA4B,IAA3B,YAAEI,EAAW,KAAEC,GAAML,EACjC,MAAM,IAAEM,GAAQF,GACV,MAAEG,EAAK,WAAEC,GAAeH,EAAKI,OAC7BC,EAAa,GAAEF,SACJ,IAAfA,EAAmB,GAAK,mBACVF,KAEhB,OACEJ,EAAAA,cAACS,EAAAA,EAAM,KACRT,EAAAA,cAACU,EAAAA,EAAG,CAACC,MAAM,4BACXX,EAAAA,cAAA,OAAKC,UAAU,8CACdD,EAAAA,cAAA,QAAMC,UAAU,2BAA2BO,IAGzCR,EAAAA,cAAA,WACGK,EAAMO,KAAIC,IAAsB,IAArB,KAAEC,EAAI,MAAEC,GAAOF,EACzB,OACEb,EAAAA,cAAA,OAAKgB,IAAKD,EAAOd,UAAU,QACzBD,EAAAA,cAACiB,EAAAA,KAAI,CAACC,GAAIJ,EAAKK,OAAOC,MACnBN,EAAKO,YAAYV,OAEpBX,EAAAA,cAACsB,EAAAA,EAAQ,CAACvB,MAfEY,EAgBQG,EAAKO,YAAYV,MAhBf,YAAYY,KAAKZ,GAiB/BG,EAAKO,YAAYG,OACjBV,EAAKO,YAAYI,WAlBbd,KAoBR,IAIVX,EAAAA,cAACiB,EAAAA,KAAI,CAACC,GAAG,SAAQ,aAEZ,C","sources":["webpack://dimetrio-dev/./src/components/ui/PostDate/index.tsx","webpack://dimetrio-dev/./src/templates/Tags.tsx"],"sourcesContent":["import React, { ComponentProps, FunctionComponent } from \"react\";\nimport { AiOutlineCalendar } from \"react-icons/ai\";\n\ninterface PostDateProps extends ComponentProps<FunctionComponent> {\n  date: string;\n}\n\nconst PostDate = ({ date }: PostDateProps): React.ReactElement => {\n  return (\n    <div className=\"text-sm text-gray-500\">\n      {/* <AiOutlineCalendar size=\"18px\" /> */}\n      <span className=\"ml-1 text-sm -mb-0.5\">{date}</span>\n    </div>\n  );\n};\n\nexport default PostDate;\n","import * as React from \"react\"\nimport Layout from \"../components/layout\"\n// Components\nimport { Link, graphql } from \"gatsby\"\nimport PostDate from \"../components/ui/PostDate\"\nimport Tag from \"../components/ui/Tag\"\nimport SEO from \"../components/Seo\"\n\nconst Tags = ({ pageContext, data }) => {\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMdx\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with ${tag}:`\n\tconst isTitleCyrillic = (title) => /[aА-яЯ]/gm.test(title);\n  return (\n    <Layout>\n\t\t\t<SEO title=\"Article Tags | Dimetrio\"/>\n\t\t\t<div className=\"flex flex-row content-center text-gray-500\" >\n\t\t\t\t<span className=\"my-none vertical-middle\">{tagHeader}</span>\n\t\t\t</div>\n\n      <div>\n        {edges.map(({ node, index }) => {\n          return (\n            <div key={index} className=\"my-8\">\n              <Link to={node.fields.slug}>\n                {node.frontmatter.title}\n              </Link>\n              <PostDate date={\n                  isTitleCyrillic(node.frontmatter.title)\n                    ? node.frontmatter.dateRu\n                    : node.frontmatter.dateEn\n                } />\n            </div>\n          )\n        })}\n\n        <Link to=\"/tags\">All tags</Link>\n      </div>\n    </Layout>\n  )\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMdx(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n\t\t\t\t\t\tdateRu: date(formatString: \"DD MMMM, YYYY\", locale: \"ru\")\n            dateEn: date(formatString: \"DD MMMM, YYYY\", locale: \"en\")\n            tags\n          }\n          excerpt\n        }\n      }\n    }\n  }\n`"],"names":["_ref","date","React","className","pageContext","data","tag","edges","totalCount","allMdx","tagHeader","Layout","SEO","title","map","_ref2","node","index","key","Link","to","fields","slug","frontmatter","PostDate","test","dateRu","dateEn"],"sourceRoot":""}