{"version":3,"file":"component---src-pages-articles-tsx-e930e099146b61077ecd.js","mappings":"0QAmCA,EAzBa,SAAC,GAIwB,IAHpCA,EAGmC,EAHnCA,IACAC,EAEmC,EAFnCA,OAEmC,IADnCC,SAAAA,OACmC,MADxB,KACwB,EACnC,OAAID,EAEA,gBAAC,KAAD,CAAMD,IAAKA,EAAKG,GAAIF,GAClB,uBAAKG,UAAU,4GACZF,IAML,uBACEF,IAAKA,EACLI,UAAU,4GAETF,I,UCHT,EAbkB,SAAC,GAAyD,IAAvDG,EAAsD,EAAtDA,MAAOC,EAA+C,EAA/CA,KAC1B,OACE,uBAAKF,UAAU,6CACb,gBAAC,EAAAG,EAAD,CACEC,IAAKH,EACLD,UAAU,yGACVK,OAAOC,EAAAA,EAAAA,GAASJ,OCHxB,EAVoB,SAAC,GAEwB,IAAD,IAD1CJ,SAAAA,OAC0C,MAD/B,KAC+B,EAC1C,OACA,uBAAKE,UAAU,iBACVF,ICKP,EAVwB,SAAC,GAEwB,IAAD,IAD9CA,SAAAA,OAC8C,MADnC,KACmC,EAC9C,OACA,uBAAKE,UAAU,0DACVF,ICQP,EAZmB,SAAC,GAGwB,IAF1CG,EAEyC,EAFzCA,MAEyC,IADzCH,SAAAA,OACyC,MAD9B,KAC8B,EACzC,OACE,gCACE,sBAAIE,UAAU,mCAAmCC,GAChDH,K,4CCEP,IATiB,SAAC,GAAiD,IAA/CS,EAA8C,EAA9CA,KAClB,OACE,uBAAKP,UAAU,8CACb,gBAAC,MAAD,CAAmBQ,KAAK,SACxB,wBAAMR,UAAU,wBAAwBO,M,uHCM9C,EARa,SAACE,GACb,IAAQR,EAAUQ,EAAVR,MACFS,EAAY,SAAY,IAAYT,GAAxB,IAClB,OAAO,gBAAC,KAAD,CAAMF,GAAIW,GAChB,0BAAQV,UAAU,gFAAgFC,K,mBCoCpG,EAlCiB,SAACQ,GAChB,IAAQP,EAASO,EAATP,KACR,OACE,gBAAC,IAAD,KACGA,EAAKS,OAAOC,MAAMC,KAAI,WAAWC,GAAX,IAVJb,EAUOc,EAAH,EAAGA,KAAH,OACzB,gBAACC,EAAA,GAAD,CAAMpB,IAAQmB,EAAKE,OAAOC,KAAjB,IAAyBJ,EAASjB,OAAQkB,EAAKE,OAAOC,MAC9D,gBAACF,EAAA,GAAD,CAAWf,MAAOc,EAAKI,YAAYlB,MAAOC,KAAMa,EAAKI,YAAYC,QACjE,gBAACJ,EAAA,GAAD,KACC,gBAACA,EAAA,GAAD,CAAYf,MAAK,GAAKc,EAAKI,YAAYlB,QACvC,gBAACoB,EAAA,EAAD,CACUd,MAhBSN,EAiBSc,EAAKI,YAAYlB,MAjBT,YAAYqB,KAAKrB,GAkBrCc,EAAKI,YAAYI,OACjBR,EAAKI,YAAYK,UAGzB,uBAAKxB,UAAU,oDACZe,EAAKI,YAAYM,KAAKZ,KAAI,SAACa,GAAD,OACzB,uBAAK9B,IAAK8B,GACR,gBAAC,EAAD,CAAKzB,MAAOyB,SAIzB,gBAACV,EAAA,GAAD,KACCD,EAAKY","sources":["webpack://dimetrio-dev/./src/components/ui/Card/Card.tsx","webpack://dimetrio-dev/./src/components/ui/Card/CardImage.tsx","webpack://dimetrio-dev/./src/components/ui/Card/CardContent.tsx","webpack://dimetrio-dev/./src/components/ui/Card/CardDescription.tsx","webpack://dimetrio-dev/./src/components/ui/Card/CardHeader.tsx","webpack://dimetrio-dev/./src/components/ui/PostDate/index.tsx","webpack://dimetrio-dev/./src/components/ui/Tag/index.tsx","webpack://dimetrio-dev/./src/pages/articles.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { Link } from \"gatsby\";\nimport { getLinkType, LinkTypes } from \"../../../utils/getLinkType\";\n\ninterface CardProps {\n  key: string;\n  linkTo?: string;\n  children?: React.ReactNode | null;\n}\n\nconst Card = ({\n  key,\n  linkTo,\n  children = null,\n}: CardProps): React.ReactElement => {\n  if (linkTo) {\n    return (\n      <Link key={key} to={linkTo}>\n        <div className=\"flex shadow-lg  md:flex-row flex-col my-4 rounded-lg transition duration-500 ease-in-out hover:shadow-xl\">\n          {children}\n        </div>\n      </Link>\n    );\n  } else {\n    return (\n      <div\n        key={key}\n        className=\"flex shadow-lg  md:flex-row flex-col my-4 rounded-lg transition duration-500 ease-in-out hover:shadow-xl\"\n      >\n        {children}\n      </div>\n    );\n  }\n};\n\nexport default Card;\n","import * as React from \"react\";\nimport {\n  getImage,\n  GatsbyImage,\n  IGatsbyImageData,\n  ImageDataLike,\n} from \"gatsby-plugin-image\";\n\ninterface CardImageProps {\n  title: string;\n  data: ImageDataLike;\n}\n\nconst CardImage = ({ title, data }: CardImageProps): React.ReactElement => {\n  return (\n    <div className=\"flex-none h-48 md:w-48 md:h-auto relative\">\n      <GatsbyImage\n        alt={title}\n        className=\"absolute rounded-t-lg md:rounded-t-none md:rounded-l-lg inset-0 w-full h-full object-cover mt-0 m-none\"\n        image={getImage(data)}\n\n      />\n    </div>\n  );\n};\n\nexport default CardImage;\n","import * as React from \"react\";\n\ninterface CardContentProps {\n  children?: React.ReactNode | null;\n}\n\nconst CardContent = ({\n  children = null,\n}: CardContentProps): React.ReactElement => {\n  return (\n\t\t<div className=\"flex-auto p-6\">\n      {children}\n    </div>\n  );\n};\n\nexport default CardContent;","import * as React from \"react\";\n\ninterface CardDescriptionProps {\n  children?: React.ReactNode | string | null;\n}\n\nconst CardDescription = ({\n  children = null,\n}: CardDescriptionProps): React.ReactElement => {\n  return (\n\t\t<div className=\"w-full flex-none text-sm text-gray-500 font-light mt-2\">\n      {children}\n    </div>\n  );\n};\n\nexport default CardDescription;","import * as React from \"react\";\n\ninterface CardHeaderProps {\n  title: string;\n  children?: React.ReactChildren | null;\n}\n\nconst CardHeader = ({\n  title,\n  children = null,\n}: CardHeaderProps): React.ReactElement => {\n  return (\n    <>\n      <h4 className=\"flex-auto text-xl font-semibold\">{title}</h4>\n      {children}\n    </>\n  );\n};\n\nexport default CardHeader;\n","import React, { ComponentProps, FunctionComponent } from \"react\";\nimport { AiOutlineCalendar } from \"react-icons/ai\";\n\ninterface PostDateProps extends ComponentProps<FunctionComponent> {\n  date: string;\n}\n\nconst PostDate = ({ date }: PostDateProps): React.ReactElement => {\n  return (\n    <div className=\"w-full flex flex-row text-sm text-gray-500\">\n      <AiOutlineCalendar size=\"18px\" />\n      <span className=\"ml-1 text-sm -mb-0.5\">{date}</span>\n    </div>\n  );\n};\n\nexport default PostDate;\n","import React, { ComponentProps } from 'react';\nimport { Link } from 'gatsby';\nimport _ from 'lodash';\n\n\ninterface TagProps extends ComponentProps<React.FunctionComponent> {\n  title: string,\n} \n\nconst Tag  = (props: TagProps): React.ReactElement => {\n\tconst { title } = props;\n\tconst path :string = `/tags/${_.kebabCase(title)}/`;\n\treturn <Link to={path}>\n\t\t<button className=\"bg-blue-500 hover:bg-blue-700 mr-2 my-1 py-1 px-4 text-white rounded text-sm\">{title}</button>\n\t</Link>\n}\n\nexport default Tag","import * as React from \"react\";\nimport { PageProps, graphql, Link } from \"gatsby\";\nimport Layout from \"../components/layout/\";\nimport { AiOutlineCalendar } from \"react-icons/ai\";\nimport { ArticleList } from \"../types/Articles\";\nimport Tag from \"../components/ui/Tag\";\nimport { getImage, GatsbyImage } from \"gatsby-plugin-image\";\nimport PostDate from \"../components/ui/PostDate\";\nimport { Card, CardContent, CardDescription, CardHeader, CardImage } from \"../components/ui/Card\"\nconst isTitleCyrillic = (title:string) => /[aА-яЯ]/gm.test(title);\n\ninterface BlogProps extends PageProps {\n  data: ArticleList;\n}\n\nconst BlogPage = (props: BlogProps): React.ReactElement => {\n  const { data } = props;\n  return (\n    <Layout>\n      {data.allMdx.edges.map(({ node }, index) => (\n\t\t\t\t<Card key={`${node.fields.slug}_${index}`} linkTo={node.fields.slug}>\n\t\t\t\t\t<CardImage title={node.frontmatter.title} data={node.frontmatter.cover} />\n\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t<CardHeader title={`${node.frontmatter.title}`} />\n\t\t\t\t\t\t<PostDate\n                date={\n                  isTitleCyrillic(node.frontmatter.title)\n                    ? node.frontmatter.dateRu\n                    : node.frontmatter.dateEn\n                }\n              />\n              <div className=\"flex flex-row flex-wrap items-baseline mt-4 mb-6\">\n                {node.frontmatter.tags.map((tag) => (\n                  <div key={tag}>\n                    <Tag title={tag} />\n                  </div>\n                ))}\n              </div>\n\t\t\t\t\t\t\t<CardDescription>\n\t\t\t\t\t\t\t{node.excerpt}\n\t\t\t\t\t\t\t</CardDescription>\n\t\t\t\t\t</CardContent>\n\n\t\t\t\t</Card>\n      ))}\n    </Layout>\n  );\n};\n\nexport default BlogPage;\nexport const query = graphql`\n  query {\n    allMdx(sort: { fields: [frontmatter___date], order: DESC }) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            cover {\n              childImageSharp {\n                gatsbyImageData(layout: FULL_WIDTH, sizes: \"300px\")\n              }\n            }\n            dateRu: date(formatString: \"DD MMMM, YYYY\", locale: \"ru\")\n            dateEn: date(formatString: \"DD MMMM, YYYY\", locale: \"en\")\n            tags\n          }\n          fields {\n            slug\n          }\n          excerpt\n        }\n      }\n    }\n  }\n`;\n"],"names":["key","linkTo","children","to","className","title","data","G","alt","image","getImage","date","size","props","path","allMdx","edges","map","index","node","Card","fields","slug","frontmatter","cover","PostDate","test","dateRu","dateEn","tags","tag","excerpt"],"sourceRoot":""}