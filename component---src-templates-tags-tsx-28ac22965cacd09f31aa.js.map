{"version":3,"file":"component---src-templates-tags-tsx-28ac22965cacd09f31aa.js","mappings":"wIAgBA,IATiB,SAAC,GAAiD,IAA/CA,EAA8C,EAA9CA,KAClB,OACE,uBAAKC,UAAU,8CACb,gBAAC,MAAD,CAAmBC,KAAK,SACxB,wBAAMD,UAAU,wBAAwBD,M,+ECiC9C,UApCa,SAAC,GAA2B,IAAzBG,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACnBC,EAAQF,EAARE,IACR,EAA8BD,EAAKE,OAA3BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,WACTC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,gBAECH,EAFD,IAIf,OACE,gBAAC,IAAD,KACD,gBAAC,IAAD,CAAKK,MAAM,4BACX,uBAAKT,UAAU,8CACd,wBAAMA,UAAU,2BAA2BQ,IAGzC,2BACGF,EAAMI,KAAI,YAAsB,IATfD,EASJE,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAClB,OACE,uBAAKC,IAAKD,EAAOZ,UAAU,QACzB,gBAAC,EAAAc,KAAD,CAAMC,GAAIJ,EAAKK,OAAOC,MACnBN,EAAKO,YAAYT,OAEpB,gBAAC,IAAD,CAAUV,MAfEU,EAgBQE,EAAKO,YAAYT,MAhBf,YAAYU,KAAKV,GAiB/BE,EAAKO,YAAYE,OACjBT,EAAKO,YAAYG,cAM/B,gBAAC,EAAAP,KAAD,CAAMC,GAAG,SAAT","sources":["webpack://dimetrio-dev/./src/components/ui/PostDate/index.tsx","webpack://dimetrio-dev/./src/templates/Tags.tsx"],"sourcesContent":["import React, { ComponentProps, FunctionComponent } from \"react\";\nimport { AiOutlineCalendar } from \"react-icons/ai\";\n\ninterface PostDateProps extends ComponentProps<FunctionComponent> {\n  date: string;\n}\n\nconst PostDate = ({ date }: PostDateProps): React.ReactElement => {\n  return (\n    <div className=\"w-full flex flex-row text-sm text-gray-500\">\n      <AiOutlineCalendar size=\"18px\" />\n      <span className=\"ml-1 text-sm -mb-0.5\">{date}</span>\n    </div>\n  );\n};\n\nexport default PostDate;\n","import * as React from \"react\"\nimport Layout from \"../components/layout\"\n// Components\nimport { Link, graphql } from \"gatsby\"\nimport PostDate from \"../components/ui/PostDate\"\nimport Tag from \"../components/ui/Tag\"\nimport SEO from \"../components/Seo\"\n\nconst Tags = ({ pageContext, data }) => {\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMdx\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with ${tag}:`\n\tconst isTitleCyrillic = (title) => /[aА-яЯ]/gm.test(title);\n  return (\n    <Layout>\n\t\t\t<SEO title=\"Article Tags | Dimetrio\"/>\n\t\t\t<div className=\"flex flex-row content-center text-gray-500\" >\n\t\t\t\t<span className=\"my-none vertical-middle\">{tagHeader}</span>\n\t\t\t</div>\n\n      <div>\n        {edges.map(({ node, index }) => {\n          return (\n            <div key={index} className=\"my-8\">\n              <Link to={node.fields.slug}>\n                {node.frontmatter.title}\n              </Link>\n              <PostDate date={\n                  isTitleCyrillic(node.frontmatter.title)\n                    ? node.frontmatter.dateRu\n                    : node.frontmatter.dateEn\n                } />\n            </div>\n          )\n        })}\n\n        <Link to=\"/tags\">All tags</Link>\n      </div>\n    </Layout>\n  )\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMdx(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n\t\t\t\t\t\tdateRu: date(formatString: \"DD MMMM, YYYY\", locale: \"ru\")\n            dateEn: date(formatString: \"DD MMMM, YYYY\", locale: \"en\")\n            tags\n          }\n          excerpt\n        }\n      }\n    }\n  }\n`"],"names":["date","className","size","pageContext","data","tag","allMdx","edges","totalCount","tagHeader","title","map","node","index","key","Link","to","fields","slug","frontmatter","test","dateRu","dateEn"],"sourceRoot":""}