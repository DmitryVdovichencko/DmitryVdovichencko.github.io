{"version":3,"file":"component---src-pages-projects-tsx-f2f226e7f47fd3e2665a.js","mappings":"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","sources":["webpack://dimetrio-dev/./src/components/ui/Card/Card.tsx","webpack://dimetrio-dev/./src/components/ui/Card/CardImage.tsx","webpack://dimetrio-dev/./src/components/ui/Card/CardContent.tsx","webpack://dimetrio-dev/./src/components/ui/Card/CardDescription.tsx","webpack://dimetrio-dev/./src/components/ui/Card/CardHeader.tsx","webpack://dimetrio-dev/./src/content/projects/projects.ts","webpack://dimetrio-dev/./src/components/ui/LinkButton/index.tsx","webpack://dimetrio-dev/./src/pages/projects.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { Link } from \"gatsby\";\nimport { getLinkType, LinkTypes } from \"../../../utils/getLinkType\";\n\ninterface CardProps {\n  key: string;\n  linkTo?: string;\n  children?: React.ReactNode | null;\n}\n\nconst Card = ({\n  key,\n  linkTo,\n  children = null,\n}: CardProps): React.ReactElement => {\n  if (linkTo) {\n    return (\n      <Link key={key} to={linkTo}>\n        <div className=\"flex shadow-lg  md:flex-row flex-col my-4 rounded-lg transition duration-500 ease-in-out hover:shadow-xl\">\n          {children}\n        </div>\n      </Link>\n    );\n  } else {\n    return (\n      <div\n        key={key}\n        className=\"flex shadow-lg  md:flex-row flex-col my-4 rounded-lg transition duration-500 ease-in-out hover:shadow-xl\"\n      >\n        {children}\n      </div>\n    );\n  }\n};\n\nexport default Card;\n","import * as React from \"react\";\nimport {\n  getImage,\n  GatsbyImage,\n  IGatsbyImageData,\n  ImageDataLike,\n} from \"gatsby-plugin-image\";\n\ninterface CardImageProps {\n  title: string;\n  data: ImageDataLike;\n}\n\nconst CardImage = ({ title, data }: CardImageProps): React.ReactElement => {\n  return (\n    <div className=\"flex-none h-48 md:w-48 md:h-auto relative\">\n      <GatsbyImage\n        alt={title}\n        className=\"absolute rounded-t-lg md:rounded-t-none md:rounded-l-lg inset-0 w-full h-full object-cover mt-0 m-none\"\n        image={getImage(data)}\n\n      />\n    </div>\n  );\n};\n\nexport default CardImage;\n","import * as React from \"react\";\n\ninterface CardContentProps {\n  children?: React.ReactNode | null;\n}\n\nconst CardContent = ({\n  children = null,\n}: CardContentProps): React.ReactElement => {\n  return (\n\t\t<div className=\"flex-auto p-6\">\n      {children}\n    </div>\n  );\n};\n\nexport default CardContent;","import * as React from \"react\";\n\ninterface CardDescriptionProps {\n  children?: React.ReactNode | string | null;\n}\n\nconst CardDescription = ({\n  children = null,\n}: CardDescriptionProps): React.ReactElement => {\n  return (\n\t\t<div className=\"w-full flex-none text-sm text-gray-500 font-light mt-2\">\n      {children}\n    </div>\n  );\n};\n\nexport default CardDescription;","import * as React from \"react\";\n\ninterface CardHeaderProps {\n  title: string;\n  children?: React.ReactChildren | null;\n}\n\nconst CardHeader = ({\n  title,\n  children = null,\n}: CardHeaderProps): React.ReactElement => {\n  return (\n    <>\n      <h4 className=\"flex-auto text-xl font-semibold\">{title}</h4>\n      {children}\n    </>\n  );\n};\n\nexport default CardHeader;\n","import { ProjectListType } from '../../types/Projects';\n\nexport const projects:ProjectListType = [\n\t{\n\t\ttitle: 'Shift Type App',\n\t\tsrcUrl: 'https://github.com/DmitryVdovichencko/shift-type',\n\t\tdemoUrl: 'https://dmitryvdovichencko.github.io/shift-type/',\n\t\tcover: 'shift-type.jpeg',\n\t\tdescription: 'Web app to define working shift-type on selected date.',\n\t\ttags:['HTML', 'CSS', 'JS']\n\t},\n\t{\n\t\ttitle: 'HowHttpsWorks russian translation',\n\t\tsrcUrl: 'https://github.com/DmitryVdovichencko/how-https-works-russian',\n\t\tdemoUrl: 'https://howhttps.works/ru/',\n\t\tcover: 'hhttpsw.png',\n\t\tdescription: 'Russian translation project for howhttps.works comic. Simple parser with NodeJS to create .md files for translation',\n\t\ttags:['NodeJS', 'Markdown', 'Russian Translation']\n\t}\n]","import React from \"react\";\n\ninterface LinkButtonProps {\n  icon: React.ReactNode;\n  href: string;\n  title: string;\n}\n\nconst LinkButton: React.FC<LinkButtonProps> = ({\n  icon,\n  href,\n  title,\n}: LinkButtonProps) => {\n  return (\n    <a href={href} target=\"_blank\">\n      <button className=\"text-white bg-[#24292F] hover:bg-[#24292F]/90 focus:ring-4 focus:ring-[#24292F]/50 font-medium rounded-lg text-sm px-5 py-2.5 text-center inline-flex items-center dark:focus:ring-gray-500 dark:hover:bg-[#050708]/30 mr-2 mb-2\">\n        {icon}\n        <span className=\"ml-2 mt-0.5\">{title}</span>\n      </button>\n    </a>\n  );\n};\n\nexport default LinkButton;\n","import * as React from \"react\";\nimport { AiOutlineGithub, AiOutlineCaretRight } from \"react-icons/ai\";\nimport { PageProps, graphql } from \"gatsby\";\nimport Layout from \"../components/layout/\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardImage,\n} from \"../components/ui/Card\";\nimport { projects } from \"../content/projects/projects\";\nimport LinkButton from \"../components/ui/LinkButton\";\nimport { IGatsbyImageData } from \"gatsby-plugin-image\";\nimport SEO from \"../components/Seo\";\ninterface ImageData {\n  fixed: {\n    originalName: string;\n  };\n  gatsbyImageData: IGatsbyImageData;\n}\n\ninterface ProjectsData extends PageProps {\n  data: {\n    allImageSharp: {\n      nodes: Array<ImageData>;\n    };\n  };\n}\n\nconst ProjectsPage: React.FC<ProjectsData> = (props) => {\n  const { data } = props;\n  return (\n    <Layout>\n\t\t\t<SEO title=\"Projects | Dimetrio\" />\n      {projects.map(\n        ({ title, description, tags, cover, srcUrl, demoUrl }, index) => {\n          const image = data?.allImageSharp?.nodes?.filter(\n            (img) => img?.fixed?.originalName === cover\n          )[0];\n          return (\n            <Card key={`${title}_${index}`}>\n              <CardImage title={title} data={image?.gatsbyImageData} />\n\n              <CardContent>\n                <CardHeader title={title} />\n                <div className=\"flex flex-row flex-wrap items-baseline mt-4 mb-6\">\n                  {tags?.map((tag) => (\n                    <div\n                      className=\"mr-1 rounded bg-slate-200 py-1 px-2 text-stone-600 font-light text-sm\"\n                      key={tag}\n                    >\n                      {tag}\n                    </div>\n                  ))}\n                </div>\n                <CardDescription>{description}</CardDescription>\n\n                <div className=\"flex flex-row flex-wrap w-full justify-start items-end py-2\">\n                  {srcUrl && (\n                    <LinkButton\n                      href={srcUrl}\n                      title=\"Repository\"\n                      icon={<AiOutlineGithub size=\"1.5em\" />}\n                    />\n                  )}\n                  {demoUrl && (\n                    <LinkButton\n                      href={demoUrl}\n                      title=\"Demo\"\n                      icon={<AiOutlineCaretRight size=\"1.5em\" />}\n                    />\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          );\n        }\n      )}\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  query {\n    allImageSharp {\n      nodes {\n        gatsbyImageData\n        fixed {\n          originalName\n        }\n      }\n    }\n  }\n`;\n\nexport default ProjectsPage;\n"],"names":["_ref","key","linkTo","children","React","Link","to","className","title","data","GatsbyImage","alt","image","getImage","projects","srcUrl","demoUrl","cover","description","tags","icon","href","target","props","Layout","SEO","map","index","_data$allImageSharp","_data$allImageSharp$n","allImageSharp","nodes","filter","img","_img$fixed","fixed","originalName","Card","CardImage","gatsbyImageData","CardContent","CardHeader","tag","CardDescription","LinkButton","AiOutlineGithub","size","AiOutlineCaretRight"],"sourceRoot":""}